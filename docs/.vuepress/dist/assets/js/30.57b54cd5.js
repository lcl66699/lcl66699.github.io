(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{394:function(a,s,t){"use strict";t.r(s);var e=t(42),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[a._v("#")]),a._v(" webpack")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("基本概念")]),a._v(" "),t("ul",[t("li",[a._v("entry :入口 webpack执行第一步从entry开始.可抽象成输入")]),a._v(" "),t("li",[a._v("Moudule: 模块,在webpack中一切皆模块,一个模块对应一个文件,webpack会从配置的entry开始,递归找出所有依赖的模块")]),a._v(" "),t("li",[a._v("chunk:代码块,一个chunk由多个模块组成,用于代码的合并和分割")]),a._v(" "),t("li",[a._v("loader:模块转换器,用于讲模块的原内容按照需求转换新内容")]),a._v(" "),t("li",[a._v("plugin:扩展插件,在webpack构建流程中的特定时机会广播对应的事件,插件可以监听这些事件的发生,在特定的时机去做对应的事情")])])]),a._v(" "),t("h2",{attrs:{id:"webpack-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-基础"}},[a._v("#")]),a._v(" Webpack 基础")]),a._v(" "),t("h3",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" webpack webpack-cli -D "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装到本地依赖")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h2",{attrs:{id:"经典问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#经典问题"}},[a._v("#")]),a._v(" 经典问题")]),a._v(" "),t("h3",{attrs:{id:"webpack运行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack运行流程"}},[a._v("#")]),a._v(" webpack运行流程")]),a._v(" "),t("ol",[t("li",[a._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。")]),a._v(" "),t("li",[a._v("开始编译：用上一步得到的参数初始化 Compiler 对象,加载所有配置的插件,执行对象的 run 方法开始执行编译。")]),a._v(" "),t("li",[a._v("确定入口：根据配置中的 entry 找出所有的入口文件。")]),a._v(" "),t("li",[a._v("编译模块：从入口文件出发,调用所有配置的 Loader 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。")]),a._v(" "),t("li",[a._v("完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。")]),a._v(" "),t("li",[a._v("输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 Chunk,再把每个 Chunk 转换成一个单独的文件加入到输出列表,这是可以修改输出内容的最后机会。")]),a._v(" "),t("li",[a._v("输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统")])]),a._v(" "),t("p",[a._v("在以上过程中，webpack会在特定的时间点广播特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用webpack提供的API改变webpack的运行结果。")]),a._v(" "),t("h3",{attrs:{id:"compiler和compilation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compiler和compilation"}},[a._v("#")]),a._v(" compiler和compilation")]),a._v(" "),t("p",[a._v("compiler 对象包含了webpack环境的所有的配置信息，包含options，loaders，plugins等信息，负责文件监听和启动编译，这个对象在webpack启动的时候被实例化，全局只有一个compiler实例。")]),a._v(" "),t("p",[a._v("compilation 对象包含了当前模块资源，编译生成资源，变化的文件等。\ncompilation当webpack以开发模式运行时，每当检测到文件的变化，便有一次新的compilation被创建。\ncompilation对象也提供了很多事件回调事件给插件进行扩展，通过compilation 也能读取到compiler对象")]),a._v(" "),t("p",[a._v("compiler和compilation的区别在于：compiler代表了整个weback从启动到关闭的生命周期，而compilation只代表一次新的编译")]),a._v(" "),t("h3",{attrs:{id:"webpack中的module是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack中的module是什么"}},[a._v("#")]),a._v(" webpack中的Module是什么？")]),a._v(" "),t("p",[a._v("前端模块\nwepack支持 ESModule、CommonJs、AMD、Assets(image,font,video,audio,json)")]),a._v(" "),t("ol",[t("li",[a._v("ESModule")])]),a._v(" "),t("p",[a._v("关键字 export import")]),a._v(" "),t("ol",[t("li",[a._v("Commonjs")])]),a._v(" "),t("p",[a._v("关键字 module.exports require")]),a._v(" "),t("p",[a._v("package.json")]),a._v(" "),t("p",[a._v("type:module -> ESM\ntype:commonjs -> cjs 强制使用cmj模块")]),a._v(" "),t("h3",{attrs:{id:"webpack-modules-如何表达自己的各种依赖关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-modules-如何表达自己的各种依赖关系"}},[a._v("#")]),a._v(" webpack modules,如何表达自己的各种依赖关系")]),a._v(" "),t("ul",[t("li",[a._v("ESM import 语句")]),a._v(" "),t("li",[a._v("CommonJS require() 语句")]),a._v(" "),t("li",[a._v("AMD define 和 require 语句")]),a._v(" "),t("li",[a._v("css/sass/less 文件中的 @import 语句。")]),a._v(" "),t("li",[a._v("stylesheet url(...) 或者 HTML "),t("code",[a._v("<img src=...>")]),a._v("文件中的图片链接。")])]),a._v(" "),t("h3",{attrs:{id:"常说的-chunk和bundle的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常说的-chunk和bundle的区别是什么"}},[a._v("#")]),a._v(" *常说的 chunk和bundle的区别是什么？")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("chunk(过程)\nchunk是webpack打包过程中Modules的集合，是"),t("span",{staticStyle:{color:"red"}},[a._v("打包过程中的概念")]),a._v("\nwebpack打包从一个入口模块开始，入口模块引用其他模块，其他模块又引用其他模块...\n通过引用关系逐个打包模块，这些module形成了chunk")]),a._v(" "),t("p",[a._v("如果有多个入口文件，会产生多个打包路径，每条路径都会形成各自的chunk。")])]),a._v(" "),t("li",[t("p",[a._v("bundle(结果)\n是我们最终输出的一个或多个打包好的文件。")])])]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("区别")]),a._v(" "),t("p",[a._v("大多数情况下，一个chunk会产生一个bundle，但是也有例外。\n比如当我们开启source-map后, chunk和bundle就不是一对一的关系了。下面代码是一个\nchunk对应两个bundle。chunk是过程中的代码块，bundle是打包结果输出的代码块，chunk在构建完成后就会变成bundle")])]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    mode"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"production"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    entry"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        index"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./src/index.js"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    output"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        filename"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[name].js"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    devtool"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"source-map"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("h3",{attrs:{id:"loader-和-plugin-分别是做什么的-怎么工作的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loader-和-plugin-分别是做什么的-怎么工作的"}},[a._v("#")]),a._v(" Loader 和 Plugin 分别是做什么的? 怎么工作的?")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Loader\n一句话描述：模块转换器(翻译官)，将非js模块转化为webpack能识别的js模块,并且一个文件可以链式的经过多个loader进行翻译")]),a._v(" "),t("p",[a._v("loader 让 webpack 能够去处理那些非 JavaScript 文件.\nloader 可以将所有类型的文件转换为 webpack 能够处理的有效模块,然后你就可以利用 webpack 的打包能力,对它们进行处理。\n本质上,webpack loader 将所有类型的文件,转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。")])]),a._v(" "),t("li",[t("p",[a._v("pligun")]),a._v(" "),t("p",[a._v("一句话描述：扩展插件，在webpack运行的各个阶段，都会广播出去相对应的事件，插件可以监听到这些事件的发生，在特定的时机做相对应的事情")]),a._v(" "),t("p",[a._v("loader 被用于转换某些类型的模块,而插件则可以用于执行范围更广的任务。\n插件的范围包括,从打包优化和压缩,一直到重新定义环境中的变量。插件接口功能极其强大,可以用来处理各种各样的任务。")]),a._v(" "),t("p",[a._v("在 webpack 运行的生命周期中会广播出各种事件，Plugin 可以监听这些事件，在触发时通过 webpack 提供的 API 改变输出结果。\n在插件中，可以拿到 Compile 和 Compilation 的引用对象，使用它们广播事件，这些事件可以被其他插件监听到，或者对他们做出一定修改，其他插件拿到的也是变化的对象。")])])]),a._v(" "),t("h2",{attrs:{id:"文件指纹"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件指纹"}},[a._v("#")]),a._v(" 文件指纹")]),a._v(" "),t("p",[a._v("加hash  在chunk上")]),a._v(" "),t("h2",{attrs:{id:"函数式编程理论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程理论"}},[a._v("#")]),a._v(" 函数式编程理论")]),a._v(" "),t("h3",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[a._v("#")]),a._v(" 特点")]),a._v(" "),t("ul",[t("li",[a._v("vue3 react 16.8 全面化函数的推动")]),a._v(" "),t("li",[a._v("函数式编程使代码单元测试更独立 tree shaking过程流畅 方便做ut")]),a._v(" "),t("li",[a._v("减少对this依赖")]),a._v(" "),t("li",[a._v("js天生友好的函数式编程 ramda loadsh")])]),a._v(" "),t("h3",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),t("ul",[t("li",[a._v("抽象运算过程")]),a._v(" "),t("li",[a._v("并非过程运算 是一种函数的映射")]),a._v(" "),t("li",[a._v("幂等 相同的输入始终得到相同的输出")])]),a._v(" "),t("h3",{attrs:{id:"纯函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#纯函数"}},[a._v("#")]),a._v(" 纯函数")]),a._v(" "),t("h3",{attrs:{id:"数组长度未知-取最后一项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组长度未知-取最后一项"}},[a._v("#")]),a._v(" 数组长度未知，取最后一项")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("first")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("arr")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("reverse")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("arr")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("reverse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" last"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("compose")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("first"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("reverse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("module.exports.pitch")]),a._v(" "),t("p",[a._v("babel")]),a._v(" "),t("p",[a._v("loader过程中添油加醋")]),a._v(" "),t("p",[a._v("plugin")]),a._v(" "),t("ul",[t("li",[a._v("loader提供的方法 是动词 翻译馆")]),a._v(" "),t("li",[a._v("plugins 插件 是类class")])])])}),[],!1,null,null,null);s.default=n.exports}}]);